	gotContent(newTheContent) {
	  // console.log(this, 'IN gotContent', newTheContent);
	  // this.lastWordIndex = newTheContent.length-1;
  }


  
	
  gotLastWordIndex(newLastWordIndex) {
    //console.log(this, "IN gotLastWordIndex", newLastWordIndex);
    this.checkForLastNode();
     this.addEventListener("mouseover", this.setMeasureParams);
     this.notifyResize();
    

  }

  wordsOffBottom() {
	// var lwId =  '#A' + this.lastWordIndex;
	// var lastWordNode = document.querySelector(lwId);
	// // console.log(lastWordNode);
	// var lastWordNodeBottom = lastWordNode.getBoundingClientRect().bottom;

	// var previousWordNode = lastWordNode;
	// var previousWordNodeBottom = lastWordNodeBottom;
	// var numberOfWordsToCut = 0;

	// while(previousWordNodeBottom == lastWordNodeBottom){
	//   previousWordNode = previousWordNode.previousSibling;
	//   if(previousWordNode.nodeName == lastWordNode.nodeName){
	//     previousWordNodeBottom = previousWordNode.getBoundingClientRect().bottom;
	//     numberOfWordsToCut++;
	//   }
	// }

	// // console.log(this, "IN wordsOffBottom", this.lastWordIndex, numberOfWordsToCut);
	// return numberOfWordsToCut;
  }

  wordsOffTop() {
	// var lwId =  '#A' + this.firstWordIndex;
	// var firstWordNode = this.$$(lwId);
	// var firstWordNodeBottom = firstWordNode.ClientRects().bottom;

	// var nextWordNode = firstWordNode;
	// var nextWordNodeBottom = firstWordNodeBottom;
	// var numberOfWordsToCut = 0;

	// while(nextWordNodeBottom == firstWordNodeBottom){
	//   nextWordNode = nextWordNode.nextSibling;
	//   if(nextWordNode.nodeName == firstWordNode.nodeName){
	//     nextWordNodeBottom = nextWordNode.getBoundingClientRect().bottom;
	//     numberOfWordsToCut++;
	//   }
	// }
	// // console.log(this, "IN wordsOffTop", this.firstWordIndex, numberOfWordsToCut);
	// return numberOfWordsToCut;
  }
  
  computeLastRowIndex(lastWordNode) {
    // var last_word_bottom = parseInt(window.getComputedStyle(this.$.firstColumn, null).getPropertyValue("height"));
    // var line_height = 24;
    // //console.log(last_word_bottom, 'I GOT A NUMBER');
    // var bottom_of_top_mark =80;

    // var delta =  last_word_bottom - bottom_of_top_mark;
    // var numRows = Math.floor(delta/line_height);
    // // console.log(numRows);
    // this.lastRowIndex = this.firstRowIndex + numRows - 1;
    // //console.log(this, "IN computeLastRowIndex", this.lastRowIndex);

	
  }


  getLastWordNode(nodeId) {
 //    //console.log(this.lastWordIndex);
 //    let theID ='#A' + this.lastWordIndex;
 //    var lastNode = Polymer.dom(this.$.textColumnOne).querySelector(theID);
  
 //    var alastNode= Polymer.dom(this.$.textColumnOne).querySelector(theID);
    
	// if(lastNode || alastNode){
	//   return lastNode;
	// } else if (lastNode===undefined || lastNode === null){

	//     return //console.log(Error(`lastNode doesnt exist.`));
	// }
	//   else {
	//     return lastNode;
	// }
    

 //    return lastNode;
  }

  checkForLastNode() {
    var self = this;
    var lwId =  '#A' + this.lastWordIndex;
    // console.log(lwId);
    var lastNode = this.getLastWordNode(lwId)?this.getLastWordNode(lwId): Polymer.dom(this.$.textColumnOne).querySelector(lwId);
    lastNode? console.log("yeah") :self.getLastWordNode;
    
  }


  
	
  gotLastWordIndex(newLastWordIndex) {
    //console.log(this, "IN gotLastWordIndex", newLastWordIndex);
    this.checkForLastNode();
     this.addEventListener("mouseover", this.setMeasureParams);
     this.notifyResize();
    

  }

  wordsOffBottom() {
	// var lwId =  '#A' + this.lastWordIndex;
	// var lastWordNode = document.querySelector(lwId);
	// // console.log(lastWordNode);
	// var lastWordNodeBottom = lastWordNode.getBoundingClientRect().bottom;

	// var previousWordNode = lastWordNode;
	// var previousWordNodeBottom = lastWordNodeBottom;
	// var numberOfWordsToCut = 0;

	// while(previousWordNodeBottom == lastWordNodeBottom){
	//   previousWordNode = previousWordNode.previousSibling;
	//   if(previousWordNode.nodeName == lastWordNode.nodeName){
	//     previousWordNodeBottom = previousWordNode.getBoundingClientRect().bottom;
	//     numberOfWordsToCut++;
	//   }
	// }

	// // console.log(this, "IN wordsOffBottom", this.lastWordIndex, numberOfWordsToCut);
	// return numberOfWordsToCut;
  }

  wordsOffTop() {
	// var lwId =  '#A' + this.firstWordIndex;
	// var firstWordNode = this.$$(lwId);
	// var firstWordNodeBottom = firstWordNode.ClientRects().bottom;

	// var nextWordNode = firstWordNode;
	// var nextWordNodeBottom = firstWordNodeBottom;
	// var numberOfWordsToCut = 0;

	// while(nextWordNodeBottom == firstWordNodeBottom){
	//   nextWordNode = nextWordNode.nextSibling;
	//   if(nextWordNode.nodeName == firstWordNode.nodeName){
	//     nextWordNodeBottom = nextWordNode.getBoundingClientRect().bottom;
	//     numberOfWordsToCut++;
	//   }
	// }
	// // console.log(this, "IN wordsOffTop", this.firstWordIndex, numberOfWordsToCut);
	// return numberOfWordsToCut;
  }
  
  computeLastRowIndex(lastWordNode) {
    // var last_word_bottom = parseInt(window.getComputedStyle(this.$.firstColumn, null).getPropertyValue("height"));
    // var line_height = 24;
    // //console.log(last_word_bottom, 'I GOT A NUMBER');
    // var bottom_of_top_mark =80;

    // var delta =  last_word_bottom - bottom_of_top_mark;
    // var numRows = Math.floor(delta/line_height);
    // // console.log(numRows);
    // this.lastRowIndex = this.firstRowIndex + numRows - 1;
    // //console.log(this, "IN computeLastRowIndex", this.lastRowIndex);

	
  }


  getLastWordNode(nodeId) {
 //    //console.log(this.lastWordIndex);
 //    let theID ='#A' + this.lastWordIndex;
 //    var lastNode = Polymer.dom(this.$.textColumnOne).querySelector(theID);
  
 //    var alastNode= Polymer.dom(this.$.textColumnOne).querySelector(theID);
    
	// if(lastNode || alastNode){
	//   return lastNode;
	// } else if (lastNode===undefined || lastNode === null){

	//     return //console.log(Error(`lastNode doesnt exist.`));
	// }
	//   else {
	//     return lastNode;
	// }
    

 //    return lastNode;
  }

  checkForLastNode() {
    var self = this;
    var lwId =  '#A' + this.lastWordIndex;
    // console.log(lwId);
    var lastNode = this.getLastWordNode(lwId)?this.getLastWordNode(lwId): Polymer.dom(this.$.textColumnOne).querySelector(lwId);
    lastNode? console.log("yeah") :self.getLastWordNode;
    
  }

